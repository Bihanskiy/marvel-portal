{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["ComicsList","useState","comicsList","setComicsList","newItemLoading","setnewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","loading","error","getAllComics","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","imgStyle","thumbnail","CSSTransition","timeout","classNames","className","to","id","src","alt","title","style","price","TransitionGroup","component","renderItems","errorMessage","ErrorMessage","spinner","Spinner","disabled","onClick","ComicsPage","AppBanner","display","width","height","objectFit","margin","img","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","res","results","_transformCharacter","getCharacterByName","name","getCharacter","_transformComics","getComic","char","description","slice","path","extension","homepage","urls","wiki","comics","pageCount","language","textObjects","prices","avengers","avengersLogo"],"mappings":"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","file":"static/js/7.8e0b306f.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './comicsList.scss';\r\n\r\nconst ComicsList = () => {\r\n\r\n    const [comicsList, setComicsList] = useState([]);\r\n    const [newItemLoading, setnewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(0);\r\n    const [comicsEnded, setComicsEnded] = useState(false);\r\n\r\n    const { loading, error, getAllComics } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\r\n        getAllComics(offset)\r\n            .then(onComicsListLoaded)\r\n    }\r\n\r\n    const onComicsListLoaded = (newComicsList) => {\r\n        let ended = false;\r\n        if (newComicsList.length < 8) {\r\n            ended = true;\r\n        }\r\n        setComicsList([...comicsList, ...newComicsList]);\r\n        setnewItemLoading(false);\r\n        setOffset(offset + 8);\r\n        setComicsEnded(ended);\r\n    }\r\n\r\n    function renderItems(arr) {\r\n        const items = arr.map((item, i) => {\r\n            let imgStyle = { 'objectFit': 'cover' };\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = { 'objectFit': 'unset' };\r\n            }\r\n            return (\r\n                <CSSTransition key={i} timeout={500} classNames=\"comics__item\">\r\n                    <li className=\"comics__item\">\r\n                        <Link to={`/comics/${item.id}`}>\r\n                            <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\" style={imgStyle}/>\r\n                            <div className=\"comics__item-name\">{item.title}</div>\r\n                            <div className=\"comics__item-price\">{item.price}</div>\r\n                        </Link>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <ul className=\"comics__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {items}\r\n                </TransitionGroup>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const items = renderItems(comicsList);\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n\r\n    return (\r\n        <div className=\"comics__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            <button\r\n                disabled={newItemLoading}\r\n                style={{ 'display': comicsEnded ? 'none' : 'block' }}\r\n                className=\"button button__main button__long\"\r\n                onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComicsList;","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner />\r\n            <ComicsList />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=d16d66c8f4ff301e7dc83bfb3155d0d7';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 70)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return { loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic, getCharacterByName }\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\r\nimport avengers from '../../resources/img/Avengers.png';\r\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"app__banner\">\r\n            <img src={avengers} alt=\"Avengers\"/>\r\n            <div className=\"app__banner-text\">\r\n                New comics every week!<br/>\r\n                Stay tuned!\r\n            </div>\r\n            <img src={avengersLogo} alt=\"Avengers logo\" className='app__banner-img-avangers'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBanner;"],"sourceRoot":""}