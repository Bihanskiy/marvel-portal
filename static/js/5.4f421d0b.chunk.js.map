{"version":3,"sources":["components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/errorBoundary/ErrorBoundary.js","components/searchCharacter/SearchCheracter.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["CharList","props","useState","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","useMarvelService","loading","error","getAllCharacters","useEffect","onRequest","initial","then","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","id","current","forEach","item","classList","remove","add","focus","items","arr","map","i","imgStyle","thumbnail","CSSTransition","timeout","classNames","className","tabIndex","ref","el","onClick","onCharSelected","onKeyPress","e","key","src","alt","name","style","TransitionGroup","component","renderItems","errorMessage","ErrorMessage","spinner","Spinner","disabled","Skeleton","View","char","description","homepage","wiki","newComics","comics","urlId","resourceURI","split","pop","href","to","CharInfo","setChar","getCharacter","clearError","updateChar","charId","onCharLoaded","skeleton","content","RandomChar","timerId","setInterval","clearInterval","Math","floor","random","mjolnir","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","CharSearchForm","getCharacterByName","results","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","MainPage","selectedChar","SearchCheracter","decoration","display","width","height","objectFit","margin","img","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/5.4f421d0b.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport './charList.scss';\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const { loading, error, getAllCharacters } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList(charList => [...charList, ...newCharList]);\r\n        setNewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(charEnded => ended);\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    function renderItems(arr) {\r\n        const items = arr.map((item, i) => {\r\n            let imgStyle = { 'objectFit': 'cover' };\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = { 'objectFit': 'unset' };\r\n            }\r\n\r\n            return (\r\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\r\n                    <li\r\n                        className=\"char__item\"\r\n                        tabIndex={0}\r\n                        ref={el => itemRefs.current[i] = el}\r\n                        onClick={() => {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i);\r\n                        }}\r\n                        onKeyPress={(e) => {\r\n                            if (e.key === ' ' || e.key === \"Enter\") {\r\n                                props.onCharSelected(item.id);\r\n                                focusOnItem(i);\r\n                            }\r\n                        }}>\r\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle} />\r\n                        <div className=\"char__name\">{item.name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {items}\r\n                </TransitionGroup>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const items = renderItems(charList);\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            <button\r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{ 'display': charEnded ? 'none' : 'block' }}\r\n                onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Skeleton from '../skeleton/Skeleton';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const [char, setChar] = useState(null);\r\n\r\n    const { loading, error, getCharacter, clearError } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar()\r\n    }, [props.charId])\r\n\r\n    const updateChar = () => {\r\n        const { charId } = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n\r\n        clearError();\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const skeleton = char || loading || error ? null : <Skeleton />;\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {skeleton}\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({ char }) => {\r\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\r\n\r\n    let imgStyle = { 'objectFit': 'cover' };\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = { 'objectFit': 'contain' };\r\n    }\r\n\r\n    const newComics = comics.map(item => {\r\n        const urlId = item.resourceURI.split(\"/\").pop();\r\n        return { urlId, name: item.name }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={imgStyle} />\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {newComics.length > 0 ? null : 'There is no comics with this character'}\r\n                {\r\n                    newComics.map((item, i) => {\r\n                        // eslint-disable-next-line\r\n                        if (i > 9) return;\r\n                        return (\r\n                            <li key={i} className=\"char__comics-item\">\r\n                                <Link to={`/comics/${item.urlId}`}>{item.name}</Link>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        const timerId = setInterval(updateChar, 60000);\r\n\r\n        return () => {\r\n            clearInterval(timerId)\r\n        }\r\n    }, [])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\r\n        getCharacter(id)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={updateChar} className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({char}) => {\r\n    const {name, description, thumbnail, homepage, wiki} = char;\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import {useState} from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './searchCheracter.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={loading}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\n\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport RandomChar from \"../randomChar/RandomChar\"\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport SearchCheracter from \"../searchCharacter/SearchCheracter.js\"\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <SearchCheracter />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=d16d66c8f4ff301e7dc83bfb3155d0d7';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return { loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic, getCharacterByName }\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}"],"sourceRoot":""}